#!/usr/bin/env python3
"""
Teste r√°pido do sistema de coleta de not√≠cias
Executa verifica√ß√µes b√°sicas para garantir que tudo est√° funcionando
"""

import sys
import os
import importlib
from datetime import datetime

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("üîç Testando importa√ß√µes...")
    
    required_modules = [
        'requests',
        'beautifulsoup4',
        'pandas',
        'schedule',
        'lxml'
    ]
    
    failed_imports = []
    
    for module in required_modules:
        try:
            importlib.import_module(module)
            print(f"  ‚úÖ {module}")
        except ImportError:
            print(f"  ‚ùå {module}")
            failed_imports.append(module)
    
    if failed_imports:
        print(f"\n‚ùå Falha na importa√ß√£o: {', '.join(failed_imports)}")
        print("Execute: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Todas as importa√ß√µes funcionaram!")
    return True


def test_local_modules():
    """Testa se os m√≥dulos locais podem ser importados"""
    print("\nüîç Testando m√≥dulos locais...")
    
    local_modules = [
        'config',
        'news_collector',
        'data_processor',
        'scheduler'
    ]
    
    failed_imports = []
    
    for module in local_modules:
        try:
            importlib.import_module(module)
            print(f"  ‚úÖ {module}")
        except ImportError as e:
            print(f"  ‚ùå {module}: {e}")
            failed_imports.append(module)
    
    if failed_imports:
        print(f"\n‚ùå Falha na importa√ß√£o de m√≥dulos locais: {', '.join(failed_imports)}")
        return False
    
    print("‚úÖ Todos os m√≥dulos locais funcionaram!")
    return True


def test_directories():
    """Testa se os diret√≥rios necess√°rios existem ou podem ser criados"""
    print("\nüîç Testando diret√≥rios...")
    
    required_dirs = ['output', 'logs']
    
    for dir_name in required_dirs:
        if not os.path.exists(dir_name):
            try:
                os.makedirs(dir_name)
                print(f"  ‚úÖ Criado: {dir_name}/")
            except Exception as e:
                print(f"  ‚ùå Erro ao criar {dir_name}/: {e}")
                return False
        else:
            print(f"  ‚úÖ Existe: {dir_name}/")
    
    return True


def test_config():
    """Testa se as configura√ß√µes est√£o v√°lidas"""
    print("\nüîç Testando configura√ß√µes...")
    
    try:
        from config import NEWS_SOURCES, COLLECTION_CONFIG, OUTPUT_CONFIG
        
        # Verifica fontes de not√≠cias
        if not NEWS_SOURCES:
            print("  ‚ùå Nenhuma fonte de not√≠cias configurada")
            return False
        
        print(f"  ‚úÖ Fontes configuradas: {len(NEWS_SOURCES)}")
        
        # Verifica configura√ß√µes de coleta
        if not COLLECTION_CONFIG:
            print("  ‚ùå Configura√ß√µes de coleta n√£o encontradas")
            return False
        
        print(f"  ‚úÖ Intervalo de coleta: {COLLECTION_CONFIG.get('collection_interval_hours', 'N/A')} horas")
        
        # Verifica configura√ß√µes de sa√≠da
        if not OUTPUT_CONFIG:
            print("  ‚ùå Configura√ß√µes de sa√≠da n√£o encontradas")
            return False
        
        print(f"  ‚úÖ Formato de sa√≠da: {OUTPUT_CONFIG.get('file_format', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro ao testar configura√ß√µes: {e}")
        return False


def test_basic_functionality():
    """Testa funcionalidades b√°sicas do sistema"""
    print("\nüîç Testando funcionalidades b√°sicas...")
    
    try:
        from news_collector import NewsCollectionManager
        from data_processor import DataProcessor
        
        # Testa cria√ß√£o dos objetos
        collection_manager = NewsCollectionManager()
        data_processor = DataProcessor()
        
        print("  ‚úÖ Objetos criados com sucesso")
        
        # Testa se os coletores est√£o configurados
        if hasattr(collection_manager, 'collectors') and collection_manager.collectors:
            print(f"  ‚úÖ Coletores configurados: {len(collection_manager.collectors)}")
        else:
            print("  ‚ùå Nenhum coletor configurado")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro ao testar funcionalidades: {e}")
        return False


def run_quick_test():
    """Executa teste r√°pido de uma fonte"""
    print("\nüß™ Executando teste r√°pido de coleta...")
    
    try:
        from news_collector import NewsCollectionManager
        
        collection_manager = NewsCollectionManager()
        
        # Testa apenas uma fonte para ser mais r√°pido
        if 'g1_tecnologia' in collection_manager.collectors:
            print("  üì° Testando coleta do G1 Tecnologia...")
            
            collector = collection_manager.collectors['g1_tecnologia']
            articles = collector.collect_news()
            
            if articles:
                print(f"  ‚úÖ Coletadas {len(articles)} not√≠cias do G1")
                print(f"  üì∞ Exemplo: {articles[0].title[:50]}...")
                return True
            else:
                print("  ‚ö†Ô∏è  Nenhuma not√≠cia coletada (pode ser normal)")
                return True
        else:
            print("  ‚ùå Coletor G1 n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Erro no teste r√°pido: {e}")
        return False


def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ TESTE R√ÅPIDO DO SISTEMA DE COLETA DE NOT√çCIAS")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    tests = [
        ("Importa√ß√µes de bibliotecas", test_imports),
        ("M√≥dulos locais", test_local_modules),
        ("Diret√≥rios", test_directories),
        ("Configura√ß√µes", test_config),
        ("Funcionalidades b√°sicas", test_basic_functionality),
        ("Teste r√°pido de coleta", run_quick_test)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PASSOU")
            else:
                print(f"‚ùå {test_name}: FALHOU")
        except Exception as e:
            print(f"‚ùå {test_name}: ERRO - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä RESULTADO: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!")
        print("\nüí° Pr√≥ximos passos:")
        print("   python main.py --test          # Coleta completa de teste")
        print("   python main.py --scheduler     # Iniciar agendador")
        print("   python main.py --help          # Ver todas as op√ß√µes")
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        print("\nüîß Verifique:")
        print("   1. Se todas as depend√™ncias est√£o instaladas")
        print("   2. Se est√° no diret√≥rio correto")
        print("   3. Se os arquivos de configura√ß√£o est√£o v√°lidos")
        print("   4. Os logs para mais detalhes")
    
    print("=" * 60)
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
