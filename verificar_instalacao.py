#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verificador de Instala√ß√£o do Sistema de Coleta de Not√≠cias
==========================================================

Este script verifica se todas as depend√™ncias e m√≥dulos est√£o funcionando corretamente.
Execute este arquivo para diagnosticar problemas de instala√ß√£o.
"""

import sys
import os
import subprocess
import importlib
from pathlib import Path

def verificar_python():
    """Verifica a vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    version = sys.version_info
    print(f"  Vers√£o: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("  ‚ùå Python 3.8+ √© necess√°rio")
        return False
    else:
        print("  ‚úÖ Vers√£o do Python compat√≠vel")
        return True

def verificar_pip():
    """Verifica se o pip est√° dispon√≠vel"""
    print("\nüì¶ Verificando pip...")
    
    try:
        import pip
        print(f"  ‚úÖ pip dispon√≠vel - vers√£o {pip.__version__}")
        return True
    except ImportError:
        print("  ‚ùå pip n√£o est√° dispon√≠vel")
        return False

def verificar_dependencias():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    print("\nüìö Verificando depend√™ncias...")
    
    dependencias = [
        'requests',
        'beautifulsoup4',
        'lxml',
        'pandas',
        'schedule',
        'python-dotenv',
        'feedparser',
        'newspaper3k',
        'nltk',
        'textblob'
    ]
    
    faltando = []
    instaladas = []
    
    for dep in dependencias:
        try:
            module = importlib.import_module(dep)
            version = getattr(module, '__version__', 'vers√£o desconhecida')
            print(f"  ‚úÖ {dep} - {version}")
            instaladas.append(dep)
        except ImportError:
            print(f"  ‚ùå {dep} - n√£o instalado")
            faltando.append(dep)
    
    if faltando:
        print(f"\n‚ö†Ô∏è  Depend√™ncias faltando: {', '.join(faltando)}")
        print("Execute: pip install -r requirements.txt")
        return False
    else:
        print(f"\n‚úÖ Todas as {len(instaladas)} depend√™ncias est√£o instaladas")
        return True

def verificar_modulos_locais():
    """Verifica se os m√≥dulos locais podem ser importados"""
    print("\nüè† Verificando m√≥dulos locais...")
    
    modulos = [
        'config',
        'news_collector',
        'data_processor',
        'scheduler'
    ]
    
    faltando = []
    funcionando = []
    
    for modulo in modulos:
        try:
            module = importlib.import_module(modulo)
            print(f"  ‚úÖ {modulo} - importado com sucesso")
            funcionando.append(modulo)
        except ImportError as e:
            print(f"  ‚ùå {modulo} - erro: {e}")
            faltando.append(modulo)
    
    if faltando:
        print(f"\n‚ö†Ô∏è  M√≥dulos com problema: {', '.join(faltando)}")
        return False
    else:
        print(f"\n‚úÖ Todos os {len(funcionando)} m√≥dulos locais funcionando")
        return True

def verificar_diretorios():
    """Verifica se os diret√≥rios necess√°rios existem"""
    print("\nüìÅ Verificando estrutura de diret√≥rios...")
    
    diretorios = ['output', 'logs', 'data']
    
    for dir_name in diretorios:
        if os.path.exists(dir_name):
            print(f"  ‚úÖ {dir_name}/ - existe")
        else:
            print(f"  ‚ùå {dir_name}/ - n√£o existe")
            try:
                os.makedirs(dir_name)
                print(f"  ‚úÖ {dir_name}/ - criado")
            except Exception as e:
                print(f"  ‚ùå {dir_name}/ - erro ao criar: {e}")

def verificar_arquivos():
    """Verifica se os arquivos principais existem"""
    print("\nüìÑ Verificando arquivos principais...")
    
    arquivos = [
        'requirements.txt',
        'config.py',
        'news_collector.py',
        'data_processor.py',
        'scheduler.py',
        'main.py',
        'README.md'
    ]
    
    for arquivo in arquivos:
        if os.path.exists(arquivo):
            size = os.path.getsize(arquivo)
            print(f"  ‚úÖ {arquivo} - {size} bytes")
        else:
            print(f"  ‚ùå {arquivo} - n√£o existe")

def testar_importacao_completa():
    """Testa a importa√ß√£o completa do sistema"""
    print("\nüß™ Testando importa√ß√£o completa...")
    
    try:
        # Importar m√≥dulos principais
        from config import NEWS_SOURCES, COLLECTION_CONFIG
        from news_collector import NewsCollectionManager
        from data_processor import DataProcessor
        from scheduler import NewsScheduler
        
        print("  ‚úÖ Importa√ß√£o dos m√≥dulos principais bem-sucedida")
        
        # Testar cria√ß√£o de objetos
        collector = NewsCollectionManager()
        processor = DataProcessor()
        scheduler = NewsScheduler()
        
        print("  ‚úÖ Cria√ß√£o de objetos bem-sucedida")
        
        # Testar configura√ß√µes
        print(f"  ‚úÖ Fontes configuradas: {list(NEWS_SOURCES.keys())}")
        print(f"  ‚úÖ Intervalo de coleta: {COLLECTION_CONFIG['collection_interval_hours']} horas")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro na importa√ß√£o completa: {e}")
        return False

def verificar_conectividade():
    """Verifica conectividade com as fontes de not√≠cias"""
    print("\nüåê Verificando conectividade...")
    
    try:
        import requests
        
        fontes = [
            'https://g1.globo.com/tecnologia/',
            'https://www1.folha.uol.com.br/tec/',
            'https://www.uol.com.br/tilt/'
        ]
        
        for fonte in fontes:
            try:
                response = requests.get(fonte, timeout=10)
                if response.status_code == 200:
                    print(f"  ‚úÖ {fonte} - acess√≠vel")
                else:
                    print(f"  ‚ö†Ô∏è  {fonte} - status {response.status_code}")
            except Exception as e:
                print(f"  ‚ùå {fonte} - erro: {e}")
                
    except ImportError:
        print("  ‚ùå requests n√£o dispon√≠vel para teste de conectividade")

def executar_teste_rapido():
    """Executa um teste r√°pido do sistema"""
    print("\nüöÄ Executando teste r√°pido...")
    
    try:
        from test_quick import run_quick_test
        resultado = run_quick_test()
        if resultado:
            print("  ‚úÖ Teste r√°pido bem-sucedido")
        else:
            print("  ‚ùå Teste r√°pido falhou")
        return resultado
    except ImportError:
        print("  ‚ö†Ô∏è  test_quick.py n√£o encontrado")
        return False

def main():
    """Fun√ß√£o principal de verifica√ß√£o"""
    print("üîç VERIFICADOR DE INSTALA√á√ÉO")
    print("=" * 50)
    print("Verificando se o sistema est√° funcionando corretamente...\n")
    
    resultados = []
    
    # Executar verifica√ß√µes
    resultados.append(verificar_python())
    resultados.append(verificar_pip())
    resultados.append(verificar_dependencias())
    resultados.append(verificar_modulos_locais())
    verificar_diretorios()
    verificar_arquivos()
    verificar_conectividade()
    resultados.append(testar_importacao_completa())
    resultados.append(executar_teste_rapido())
    
    # Resumo final
    print("\n" + "=" * 50)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("=" * 50)
    
    sucessos = sum(resultados)
    total = len(resultados)
    
    if sucessos == total:
        print("üéâ TODAS AS VERIFICA√á√ïES PASSARAM!")
        print("‚úÖ O sistema est√° funcionando corretamente")
        print("\nüí° Pr√≥ximos passos:")
        print("  1. Execute 'python main.py --test' para testar a coleta")
        print("  2. Execute 'python main.py --scheduler' para iniciar o agendador")
        print("  3. Execute 'python exemplo_uso.py' para ver exemplos")
    else:
        print(f"‚ö†Ô∏è  {sucessos}/{total} verifica√ß√µes passaram")
        print("‚ùå Existem problemas que precisam ser resolvidos")
        print("\nüîß Solu√ß√µes:")
        print("  1. Execute 'pip install -r requirements.txt'")
        print("  2. Verifique se est√° no diret√≥rio correto")
        print("  3. Verifique se o Python est√° configurado corretamente")
        print("  4. Execute 'python verificar_instalacao.py' novamente ap√≥s resolver os problemas")

if __name__ == "__main__":
    main()
